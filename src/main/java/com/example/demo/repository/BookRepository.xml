<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.repository.BookRepository">
	
	<!-- 書籍一覧表示 -->
	<select id="selectBookData" resultType="com.example.demo.model.BookDto">
		select
			id,
			title,
			author,
			detail,
			publiser,
			publiser_year,
			to_char(purchase_date, 'yyyy-mm-dd') as purchaseDate,
			category,
			regexp_replace(
				encode(book_image, 'base64'),E'[\\n\\r]', '', 'g'
			) as bookImageStr,
			status
			from book
		<where>
			<if test="status != null">
				status = #{status}
			</if>
			<if test="keyword != null and keyword != ''">
				<trim prefix="and (" suffix=")" prefixOverrides="or">
					or title ilike concat('%',#{keyword},'%')
					or category ilike concat('%',#{keyword},'%')
				</trim>
			</if>
		</where>
		<choose>
			<when test="sort == 'title' or sort == null">
				order by title asc, publiser_year desc
			</when>
			<when test="sort == 'publiserYear'">
				order by publiser_year desc, title asc
			</when>
		</choose>
	</select>
	
	<!-- 新規登録 -->
	<insert id="insertBookData">
		insert into book (
			title,
			author,
			publiser, 
			publiser_year,
			detail,
			<if test="purchaseDate != null and purchaseDate != ''">
				purchase_date,
			</if>	
			category,
			book_image,
			created_at,
			update_at,
			status,
			borrow_date,
			username,
			address
		) values (
			#{title},
			#{author},
			#{publiser}, 
			#{publiserYear},
			#{detail},
			<if test="purchaseDate != null and purchaseDate != ''">
				cast(concat(#{purchaseDate},' 00:00:00')as timestamp),
			</if>
			#{category},
			#{bookImage},
			#{createdAt},
			#{updateAt},
			1,
			#{borrowDate},
			#{username},
			#{address}
		)
	</insert>
	
	<!-- 貸出処理 -->
	<update id="updateStatusToBorrowed">
		update book set
			status = 0,
			borrow_date = cast(#{borrowDate} as timestamp),
			username = #{username},
			address = #{address}
			where id= #{id}
	</update>
	
	<!-- 返却処理 -->
	<update id="updateStatusToReturned">
		update book set
			status = 1,
			borrow_date = null,
			username = null,
			address = null
			where id= #{id}
	</update>
	
	<!-- 登録更新 -->
	<update id="updateBookData">
		update book set
			title = #{title},
			author = #{author},
			publiser = #{publiser}, 
			publiser_year = #{publiserYear},
			detail = #{detail},
			<if test="purchaseDate != null and purchaseDate != ''">
				purchase_date = cast(concat(#{purchaseDate},' 00:00:00')as timestamp),
			</if>

			category = #{category},
			<!-- 画像がnullの場合は画像更新無効 -->
			<if test="bookImage != null">
				book_image = #{bookImage},
			</if>
			update_at = #{updateAt}
			where id= #{id}
	</update>
	
	<!-- 書籍IDから書籍情報を取得 -->
	<select id="selectTargetBookData">
		select
			id,
			title,
			author,
			detail,
			publiser,
			publiser_year,
			to_char(purchase_date, 'yyyy-mm-dd') as purchaseDate,
			category,
			status,
			borrow_date,
			username,
			address
			from book where id = #{id}
	</select>
	
	<!-- 書籍IDから画像取得 -->
	<select id="findImageBase64ById">
		select regexp_replace(
			encode(book_image, 'base64'),E'[\\n\\r]', '', 'g'
		)
		from book where id = #{id}
	</select>
	
	<!-- 登録削除 -->
	<delete id="deleteBookData">
		delete from book where id = #{id}
	</delete>
</mapper>